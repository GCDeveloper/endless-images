{"version":3,"sources":["caret-down.svg","loading.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","props","state","loaded","seed","words","word","Math","floor","random","length","this","numberId","size","Date","getTime","imgSrc","getSrc","inView","ref","isInView","className","src","loading","onError","ev","target","onLoad","setState","alt","loadingIcon","Component","App","width","window","innerWidth","height","innerHeight","imageSizeMultiplier","lastScrollY","scrollY","restrictScroll","images","createImages","lastId","addEventListener","onScroll","onResize","removeEventListener","scrollYDiff","abs","scrollBy","id","key","max","newImages","startId","n","i","createImage","push","caretDownImage","onClick","startY","targetY","frame","loop","t","easeInOutQuad","document","documentElement","scrollTop","round","requestAnimationFrame","href","rel","map","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a3fcf77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/caret-down.8749d91d.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.51149a8e.gif\";","import React, { Component } from \"react\";\r\nimport { InView } from \"react-intersection-observer\";\r\nimport \"./App.css\";\r\nimport caretDownImage from \"./caret-down.svg\";\r\nimport loadingIcon from \"./loading.gif\";\r\nclass Image extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: false\r\n    };\r\n  }\r\n  getSrc(seed) {\r\n    //search terms for the second random image generator (after the first 1080 images).\r\n    //many possible words couldn't be used because the loremflickr image generator was unable to generate a random image\r\n    //and will tend to generate the metal cat statue on a curb image instead.\r\n    const words = [\r\n      \"\",\r\n      \"dog\",\r\n      \"hill\",\r\n      \"city\",\r\n      \"animal\",\r\n      \"people\",\r\n      \"car\",\r\n      \"person\",\r\n      \"weather\",\r\n      \"light\",\r\n      \"food\",\r\n      \"autumn\",\r\n      \"tree\",\r\n      \"plants\",\r\n      \"jungle\",\r\n      \"music\",\r\n      \"asia\",\r\n      \"temple\",\r\n      \"church\",\r\n      \"art\",\r\n      \"science\",\r\n      \"architecture\",\r\n      \"building\",\r\n      \"plane\",\r\n      \"sky\",\r\n      \"cloud\",\r\n      \"sunset\",\r\n      \"moon\",\r\n      \"earth\",\r\n      \"stars\",\r\n      \"galaxy\",\r\n      \"culture\",\r\n      \"religion\",\r\n      \"bird\",\r\n      \"castle\",\r\n      \"flower\"\r\n    ];\r\n    const word = words[Math.floor(Math.random() * words.length)];\r\n    //seed is just the starting index, so you get a different set of random images each time.\r\n    //numberId is incremented so you get a unique id each time, although this doesn't apply to loremflicker since that just requires a unique query to get a random image\r\n    return this.props.numberId >= 1080\r\n      ? `https://loremflickr.com/${this.props.size}/${\r\n          this.props.size\r\n        }/${word}?random=${seed + new Date().getTime()}`\r\n      : `https://picsum.photos/${this.props.size}/${\r\n          this.props.size\r\n        }/?image=${(seed + this.props.numberId) % 1080}`;\r\n  }\r\n  render() {\r\n    const imgSrc = this.getSrc(this.props.seed);\r\n    return (\r\n      <InView>\r\n        {({ inView, ref }) => {\r\n          this.props.isInView(inView);\r\n          return (\r\n            <article className=\"image-article\" ref={ref}>\r\n              <img\r\n                className=\"image-random\"\r\n                src={imgSrc}\r\n                loading=\"lazy\"\r\n                onError={ev => {\r\n                  ev.target.src = this.getSrc(\r\n                    Math.floor(Math.random() * 99999)\r\n                  );\r\n                }}\r\n                onLoad={ev => {\r\n                  this.setState({\r\n                    loaded: true\r\n                  });\r\n                }}\r\n                alt=\"random\"\r\n              />\r\n              {this.state.loaded ? null : (\r\n                <img\r\n                  src={loadingIcon}\r\n                  alt=\"Loading...\"\r\n                  className=\"loading-icon\"\r\n                />\r\n              )}\r\n            </article>\r\n          );\r\n        }}\r\n      </InView>\r\n    );\r\n  }\r\n}\r\nfunction easeInOutQuad(t) {\r\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r\n}\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.seed = Math.floor(Math.random() * 10000);\r\n    this.width = window.innerWidth;\r\n    this.height = window.innerHeight;\r\n    this.imageSizeMultiplier = 0.5; //half screen width\r\n    this.lastScrollY = window.scrollY;\r\n    this.restrictScroll = false;\r\n    this.state = {\r\n      size: Math.floor(this.width * this.imageSizeMultiplier)\r\n    };\r\n    this.state = {\r\n      ...this.state,\r\n      images: this.createImages(0, 3), //3 images starting at index 0\r\n      lastId: 2 //of indexes 0,1,2 - 2 is the last index\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener(\"scroll\", () => this.onScroll());\r\n    window.addEventListener(\"resize\", () => this.onResize());\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"scroll\", () => this.onScroll());\r\n    window.removeEventListener(\"resize\", () => this.onResize());\r\n  }\r\n  onScroll() {\r\n    //had to implement this hack because when images loaded after the scroll\r\n    //animation from clicking the caret, it would flick to 0 scrollY.\r\n    if (this.restrictScroll) {\r\n      const scrollYDiff = window.scrollY - this.lastScrollY;\r\n      //console.log(\"scroll diff:\", scrollYDiff);\r\n      if (\r\n        scrollYDiff !== 0 &&\r\n        Math.abs(scrollYDiff) < window.innerHeight * 0.5\r\n      ) {\r\n        //console.log(\"no longer restricting because\", Math.abs(scrollYDiff), \"is less than\", window.innerHeight*0.);\r\n        this.restrictScroll = false;\r\n      }\r\n      if (\r\n        scrollYDiff < 0 &&\r\n        Math.abs(scrollYDiff) >= window.innerHeight * 0.6\r\n      ) {\r\n        //scroll back to previous value\r\n        window.scrollBy(0, -scrollYDiff);\r\n        //console.log(\"scrolled back to original position\");\r\n      } else {\r\n        //console.log(\"didn't scroll back because either \",scrollYDiff,\" is >= 0 or because \",Math.abs(scrollYDiff),\" is < \", );\r\n      }\r\n    }\r\n    this.lastScrollY = window.scrollY;\r\n  }\r\n  onResize() {\r\n    //resize images to fit nicely on the screen\r\n    this.width = window.innerWidth;\r\n    this.height = window.innerHeight;\r\n    this.setState({\r\n      size: Math.floor(this.width * this.imageSizeMultiplier)\r\n    });\r\n  }\r\n  createImage(id, size) {\r\n    return (\r\n      <Image\r\n        key={\"img-\" + id}\r\n        numberId={id}\r\n        size={Math.max(size, 540)}\r\n        seed={this.seed}\r\n        isInView={inView => {\r\n          if (inView && id >= this.state.lastId - 2) {\r\n            let newImages = [\r\n              ...this.state.images,\r\n              ...this.createImages(this.state.lastId + 1, 3)\r\n            ];\r\n            //fetch n\r\n            this.setState({\r\n              images: newImages,\r\n              lastId: this.state.lastId + 3\r\n            });\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  createImages(startId, n) {\r\n    let images = [];\r\n    for (let i = 0; i < n; i++) {\r\n      const id = i + startId;\r\n      let Image = this.createImage(id, this.state.size);\r\n      images.push({ id, Image });\r\n    }\r\n    return images;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">Welcome to Lorem Image</header>\r\n        <img\r\n          src={caretDownImage}\r\n          alt=\"go down\"\r\n          className=\"caret-down\"\r\n          onClick={() => {\r\n            const startY = window.scrollY;\r\n            const targetY = this.height;\r\n            let frame = 0;\r\n            const totalFrames = 48; //Math.ceil((targetY-startY)/this.height*48);\r\n            const loop = () => {\r\n              const t = easeInOutQuad(frame / totalFrames);\r\n              if (t < 1) {\r\n                document.documentElement.scrollTop = Math.round(\r\n                  startY + (targetY - startY) * t\r\n                );\r\n                requestAnimationFrame(loop);\r\n              } else {\r\n                this.restrictScroll = true;\r\n              }\r\n              frame++;\r\n            };\r\n            loop();\r\n          }}\r\n        />\r\n        <p id=\"thanks\">\r\n          Images thanks to{\" \"}\r\n          <a\r\n            href=\"https://picsum.photos\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Lorem Picsum\r\n          </a>{\" \"}\r\n          and{\" \"}\r\n          <a\r\n            href=\"https://loremflickr.com/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            LoremFlickr\r\n          </a>\r\n          .\r\n        </p>\r\n        {this.state.images.map(({ Image }) => Image)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}